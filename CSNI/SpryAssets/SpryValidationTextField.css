.FormTD  
 {
	width: 25%;
	text-align: left;
}
.SemiColum {
	font-weight: bold;
	color: #669999;
	text-decoration: none;
	margin: 0em;
	padding-top: 0em;
	padding-right: 0.25em;
	padding-bottom: 0em;
	padding-left: 0.25em;
	width: 1em;
}
#TBForm {
	width: 100%;
}


#TBForm td {
	padding-top: 0em;
	padding-right: 1em;
	padding-bottom: 0.75em;
	padding-left: 0em;
	text-align: left;
}

.textfieldRequiredMsg  {
	color: #CC3333;
	display: block;
}
label {
	white-space: normal;
	display: inherit;
	clear: none;
	float: left;
	margin-right: 0.25em;
}


.F-BDr1 {
	text-decoration: none;
	border: 0.125em solid #669999;
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 1em;
	display: block;
}

.autoWD {
	width: auto;
}
.country {
	font-family: Verdana, Arial, Helvetica, sans-serif;
	width: 12em;
	font-size: 1em;
	display: block;
}




.button {
	background-color: #006666;
	border-top-width: thin;
	border-right-width: thin;
	border-bottom-width: thin;
	border-left-width: thin;
	border-top-style: solid;
	border-right-style: solid;
	border-bottom-style: solid;
	border-left-style: solid;
	border-top-color: #009999;
	border-right-color: #003333;
	border-bottom-color: #003333;
	border-left-color: #009999;
	font-family: Arial, Helvetica, sans-serif;
	font-weight: bold;
	color: #FFFFFF;
	text-decoration: none;
}



/* SpryFormValidation.css - Revision: Spry Preview Release 1.4 */

/* Copyright (c) 2006. Adobe Systems Incorporated. All rights reserved. */


/* These are the classes applied on the error messages
 * which prevent them from being displayed by default.
 */ 
.textfieldRequiredMsg, 
.textfieldInvalidFormatMsg, 
.textfieldMinValueMsg,
.textfieldMaxValueMsg,
.textfieldMinCharsMsg,
.textfieldMaxCharsMsg,
.textfieldValidMsg {
	display: none;
}

/* These selectors change the way messages look when the widget is in one of the error states.
 * These classes set a default red border and color for the error text.
 * The state class (e.g. .textfieldRequiredState) is applied on the top-level container for the widget,
 * and this way only the specific error message can be shown by setting the display property to; inline.
 */
.textfieldRequiredState .textfieldRequiredMsg, 
.textfieldInvalidFormatState .textfieldInvalidFormatMsg, 
.textfieldMinValueState .textfieldMinValueMsg,
.textfieldMaxValueState .textfieldMaxValueMsg,
.textfieldMinCharsState .textfieldMinCharsMsg,
.textfieldMaxCharsState .textfieldMaxCharsMsg
{
	display: inline;
	color: #CC3333;
	font-size: x-small;
	line-height: normal;
}



/* The next three group selectors control the way the core element (INPUT) looks like when the widget is in one of the states: * focus, required / invalid / minValue / maxValue / minChars / maxChars , valid 
 * There are two selectors for each state, to cover the two main usecases for the widget:
 * - the widget id is placed on the top level container for the INPUT
 * - the widget id is placed on the INPUT element itself (there are no error messages)
 */
 
 /* When the widget is in the valid state the INPUT has a green background applied on it. */
.textfieldValidState input, input.textfieldValidState {
	background-color: #FFFFFF;
}

/* When the widget is in an invalid state the INPUT has a red background applied on it. */
input.textfieldRequiredState, .textfieldRequiredState input, 
input.textfieldInvalidFormatState, .textfieldInvalidFormatState input, 
input.textfieldMinValueState, .textfieldMinValueState input, 
input.textfieldMaxValueState, .textfieldMaxValueState input, 
input.textfieldMinCharsState, .textfieldMinCharsState input, 
input.textfieldMaxCharsState, .textfieldMaxCharsState input {
	background-color: #FF9999;
}

/* When the widget has received focus, the INPUT has a yellow background applied on it. */
.textfieldFocusState input, input.textfieldFocusState {
	background-color: #FFFFFF;
	color: #333333;
	text-decoration: none;
}

/* This class applies only for a short period of time and changes the way the text in the textbox looks like.
 * It applies only when the widget has character masking enabled and the user tries to type in an invalid character.
 */
.textfieldFlashText input, input.textfieldFlashText{
	color: red;
}
